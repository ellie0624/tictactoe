# set the board
ellie_board = {'7':' ', '8':' ', '9':' ',
               '4':' ', '5':' ', '6':' ',
               '1':' ', '2':' ', '3':' '}
    
def print_board(board):
    print(board['7'] + '|' + board['8'] + '|' + board['9'])
    print('-+-+-')
    print(board['4'] + '|' + board['5'] + '|' + board['6'])
    print('-+-+-')
    print(board['1'] + '|' + board['2'] + '|' + board['3'])
# play the game
winner = None

game_still_on = True

# X goes first

current_player = 'X'

def game():
    
    print_board(ellie_board)
    
    player_choice()
    
    while game_still_on:
        
        player_position(current_player)
        
        check_if_game_over()
        
        flip_player()
    
#         when the game ends
    if winner == 'X' or winner =='O':
        print(winner + " won!")
    else:
        print("Tie!")
    
def player_choice():
# player choose X or O 
    player_1 = input("Please pick a marker X or O ")
    while True:
        if player_1.upper() == 'X':
            player_2 = 'O'
            print("You have chosen " + player_1.upper() + " .Player 2 will be " + player_2)
            return (player_1.upper(),'O')
        elif player_1.upper() == 'O':
            player_2 = 'X'
            print("You have chosen " + player_1.upper() + " .Player 2 will be " + player_2)
            return (player_1.upper(), 'O')
        else:
            player_1 = input("Please pick a marker X or O ")

def player_position(player):
    print(player + "'s turn")
    position = input("Please choose a position from 1 to 9: ")
    while position not in list(ellie_board.keys()):
        position = input("Please choose a position from 1 to 9:")
    while ellie_board[position] != " ":
        print("This block is already filled. ")
        position = input("Please choose a position from 1 to 9:") 
    ellie_board[position] = player
    print_board(ellie_board)
        
            
def check_if_game_over():
#     check if win
    check_if_win()
# check if tie
    check_if_tie()

def check_if_win():
    global winner
# check rows
    row_winner = check_rows()
# check columns
    column_winner = check_columns()
# check diagonals
    diagonal_winner = check_diagonals()
    if row_winner:
        winner = row_winner
    elif column_winner:
        winner = column_winner
    elif diagonal_winner:
        winner = diagonal_winner
    else:
        winner = None
    return

def check_rows():
    global game_still_on
    row_1 = ellie_board['7'] == ellie_board['8'] == ellie_board['9'] != ' '
    row_2 = ellie_board['4'] == ellie_board['5'] == ellie_board['6'] != ' '
    row_3 = ellie_board['1'] == ellie_board['2'] == ellie_board['3'] != ' '
    if row_1 or row_2 or row_3:
        game_still_on = False
    if row_1:
        return ellie_board['7']
    elif row_2:
        return ellie_board['4']
    elif row_3:
        return ellie_board['1']
    return

def check_columns():
    global game_still_on
    column_1 = ellie_board['7'] == ellie_board['4'] == ellie_board['1'] != ' '
    column_2 = ellie_board['8'] == ellie_board['5'] == ellie_board['2'] != ' '
    column_3 = ellie_board['9'] == ellie_board['6'] == ellie_board['3'] != ' '
    if column_1 or column_2 or column_3:
        game_still_on = False
    if column_1:
        return ellie_board['7']
    elif column_2:
        return ellie_board['8']
    elif column_3:
        return ellie_board['9']
    return

def check_diagonals():
    global game_still_on
    diagonal_1 = ellie_board['7'] == ellie_board['5'] == ellie_board['3'] != ' '
    diagonal_2 = ellie_board['9'] == ellie_board['5'] == ellie_board['1'] != ' '
    
    if diagonal_1 or diagonal_2:
        game_still_on = False
    if diagonal_1:
        return ellie_board['7']
    elif diagonal_2:
        return ellie_board['9']
    return

def check_if_tie():
    global game_still_on
    a = list(ellie_board.values())
    if " " not in a:
        game_still_on = False
    return 

def flip_player():
    global current_player
    if current_player == 'X':
        current_player = 'O'
    else:
        current_player ='X'
        
    return
game()

if __name__ == "__main__":
    game()


   
